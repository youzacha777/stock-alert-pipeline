version: '3.8'

services:
  # Zookeeper 서비스 - Kafka 메타데이터 관리
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - stock_pipeline_network
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Kafka 서비스 - 메시지 브로거
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - stock_pipeline_network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka UI - Kafka 클러스터 관리 웹 인터페이스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - stock_pipeline_network
  
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: stockuser
      POSTGRES_PASSWORD: stockpassword
      POSTGRES_DB: stockdb
      POSTGRES_MULTIPLE_DATABASES: stockdb,airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - stock_pipeline_network
    healthcheck:
      test: pg_isready -U stockuser -d stockdb
      interval: 10s
      timeout: 5s
      retries: 5

  # PGAdmin - PostgreSQL 관리 웹 인터페이스
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - stock_pipeline_network

  # Spark 마스터 노드
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: stock-spark:latest
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8090:8090"   # 웹 UI
      - "7077:7077"   # 마스터 포트
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./:/opt/airflow
      - ./:/opt/bitnami/spark/work
      - ./data/output:/opt/airflow/data/output
    networks:
      - stock_pipeline_network

  # Spark 워커 노드 1
  spark-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: stock-spark:latest
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8091:8091"  # 워커 웹 UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./:/opt/airflow
      - ./:/opt/bitnami/spark/work
      - ./data/output:/opt/airflow/data/output
    networks:
      - stock_pipeline_network

  # Spark 워커 노드 2
  spark-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: stock-spark:latest
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8092:8092"   # 워커 웹 UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./:/opt/airflow
      - ./:/opt/bitnami/spark/work
      - ./data/output:/opt/airflow/data/output
    networks:
      - stock_pipeline_network

  # Jupyter Notebook - 데이터 분석 및 코드 개발용
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      SPARK_OPTS: "--master=spark://spark-master:7077 --driver-memory=1G --executor-memory=1G"
    volumes:
      - ./:/home/jovyan/work
      # - ./jars:/home/jovyan/jars
    command: start-notebook.sh --notebookApp.token='' --NotebookApp.password=''
    networks:
      - stock_pipeline_network

  # Airflow PostgreSQL DB 초기화
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://stockuser:stockpassword@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    command: version
    networks:
      - stock_pipeline_network

  # Airflow 웹 서버
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "8070:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://stockuser:stockpassword@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__BASE_URL=http://localhost:8070
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL=10
      - AIRFLOW__CONN_SPARK_DEFAULT=spark://spark-master:7077
      - PYTHONPATH=/opt/airflow
    user: root
    volumes:
      - ./:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/output:/opt/airflow/data/output
      - ./notifiers:/opt/airflow/notifiers
    command: webserver
    networks:
      - stock_pipeline_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  # Airflow 스케줄러
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://stockuser:stockpassword@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL=10
      - AIRFLOW__CONN_SPARK_DEFAULT=spark://spark-master:7077
      - PYTHONPATH=/opt/airflow
    user: root
    volumes:
      - ./:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/output:/opt/airflow/data/output
      - ./notifiers:/opt/airflow/notifiers
    command: scheduler
    networks:
      - stock_pipeline_network
  
  # 주식 데이터 수집기
  stock-data-collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: stock-data-collector
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONUNBUFFERED=1
    volumes:
      - ./:/app
      - ./logs:/app/logs
    networks:
      - stock_pipeline_network
    restart: on-failure

  # 가격 알림 프로세서
  price-alert-processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    container_name: price-alert-processor
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONUNBUFFERED=1
    volumes:
      - ./:/app
      - ./logs:/app/logs
    networks:
      - stock_pipeline_network
    restart: on-failure

  # Db로 데이터 전달 Consumer
  db-consumer:
    build:
      context: .
      dockerfile: Dockerfile.dbconsumer
    container_name:  db-consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONUNBUFFERED=1
    volumes:
      - ./:/app
      - ./logs:/app/logs
    networks:
      - stock_pipeline_network
    restart: on-failure

networks:
  stock_pipeline_network:
    driver: bridge

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  postgres_data:
  pgadmin_data:





